const path = require('path')
const webpack = require('webpack')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = (env) => (
  require('./webpack-config-base')(env)({
    entry: (env.prod ? [] : ['webpack-hot-middleware/client']).concat([
      'bootstrap-loader',
      './index.js'
    ]),

    // Don't use hashes in dev mode for better performance
    output: {
      path: path.resolve(__dirname, '../../build/public'),
      publicPath: '/',
      filename: env.prod ? '[name].[chunkhash:7].js' : '[name].js',
      chunkFilename: env.prod ? '[name].[chunkhash:7].chunk.js' : '[name].chunk.js',
    },

    styleLoaders: env.prod ? ExtractTextPlugin.extract(
      'style-loader',
      'css-loader?modules&&importLoaders=1&&camelCase&&minimize!postcss-loader'
    ) : [
      'style-loader',
      {
        loader: 'css-loader',
        query: {
          modules: true,
          localIdentName: '[name]__[local]___[hash:base64:7]',
          importLoaders: 1,
          sourceMap: true,
          camelCase: true
        }
      },
      'postcss-loader'
    ],

    plugins: [
      // Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
      // inside your code for any environment checks; UglifyJS will automatically
      // drop any unreachable code
      new webpack.DefinePlugin({
        'process.env': {
          NODE_ENV: JSON.stringify(env.prod ? 'production' : 'development'),
          SERVER: false
        }
      }),
      new webpack.optimize.CommonsChunkPlugin({
        name: 'vendor',
        children: true,
        minChunks: 2,
        async: true,
      }),
    ].concat(env.prod ? [
      // OccurrenceOrderPlugin is needed for long-term caching to work properly
      // See http://mxs.is/googmv
      new webpack.optimize.OccurrenceOrderPlugin(true),
      // Merge all duplicate modules
      new webpack.optimize.DedupePlugin(),
      // Minify and optimize the JavaScript
      new webpack.optimize.UglifyJsPlugin({
        compress: {
          warnings: false, // don't show warnings in the console
        },
      }),
      // Extract the CSS into a seperate file
      new ExtractTextPlugin('asserts/styles/[name].[contenthash:7].css'),
      // Minify and optimize the index.html
      new HtmlWebpackPlugin({
        template: 'index.html',
        minify: {
          removeComments: true,
          collapseWhitespace: true,
          removeRedundantAttributes: true,
          useShortDoctype: true,
          removeEmptyAttributes: true,
          removeStyleLinkTypeAttributes: true,
          keepClosingSlash: true,
          minifyJS: true,
          minifyCSS: true,
          minifyURLs: true,
        },
        inject: true
      })
    ] : [
      new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
      new webpack.NoErrorsPlugin(),
      new HtmlWebpackPlugin({
        template: 'index.html',
        inject: true // Inject all files that are generated by webpack
      })
    ]),

    devtool: env.prod ? false : 'cheap-module-eval-source-map'
  })
)
